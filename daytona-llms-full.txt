# Daytona SDK Features

This document provides a comprehensive overview of all functions available in the Daytona Python SDK, with minimal examples for each feature.

## Table of Contents

- [Initialization](#initialization)
- [Sandbox Management](#sandbox-management)
- [File System Operations](#file-system-operations)
- [Git Operations](#git-operations)
- [Process Execution](#process-execution)
- [LSP Server](#lsp-server)

## Initialization

### Daytona

Main class for interacting with the Daytona server API.

```python
from daytona_sdk import Daytona, DaytonaConfig

# Initialize using environment variables
daytona = Daytona()  # Uses DAYTONA_API_KEY, DAYTONA_API_URL, DAYTONA_TARGET

# Initialize with explicit configuration
config = DaytonaConfig(
    api_key="your-api-key",
    server_url="https://your-server.com",
    target="us"
)
daytona = Daytona(config)
```

## Sandbox Management

### Create Sandbox

Creates a new sandbox with specified parameters.

```python
from daytona_sdk import CreateSandboxParams, SandboxResources

# Create default Python sandbox
sandbox = daytona.create()

# Create custom sandbox
params = CreateSandboxParams(
    language="python",
    name="my-sandbox",
    env_vars={"DEBUG": "true"},
    resources=SandboxResources(cpu=2, memory=4, disk=20),
    auto_stop_interval=60  # Auto-stop after 1 hour of inactivity
)
sandbox = daytona.create(params, timeout=40)
```

### Remove Sandbox

Remove a sandbox when it's no longer needed.

```python
daytona.remove(sandbox)
```

### List Sandboxes

List all available sandboxes.

```python
sandboxes = daytona.list()
for sandbox in sandboxes:
    print(f"{sandbox.id}: {sandbox.status}")
```

### Get Sandbox

Retrieve an existing sandbox by ID.

```python
sandbox = daytona.get_current_sandbox("my-sandbox-id")
```

### Sandbox Info

Get detailed information about a sandbox.

```python
info = sandbox.info()
print(f"Status: {info.state}")
print(f"Resources: {info.resources.cpu} CPU, {info.resources.memory} RAM")
```

### Start/Stop Sandbox

Control sandbox lifecycle.

```python
# Start sandbox
sandbox.start()

# Stop sandbox
sandbox.stop()
```

### Auto-stop Interval

Configure how long until inactive sandbox stops.

```python
# Auto-stop after 30 minutes of inactivity
sandbox.set_autostop_interval(30)

# Disable auto-stop
sandbox.set_autostop_interval(0)
```

### Preview Link

Get URL for accessing applications running in the sandbox.

```python
# Get preview link for a web server running on port 3000
url = sandbox.get_preview_link(3000)
print(f"Access your app at: {url}")
```

### Archive Sandbox

Archive a sandbox to save resources.

```python
# First stop the sandbox
sandbox.stop()
# Then archive it
sandbox.archive()
```

## File System Operations

### Create Folder

Create a new directory in the sandbox.

```python
sandbox.fs.create_folder("/workspace/data", "755")
```

### Upload File

Upload a file to the sandbox.

```python
# Upload string content
content = b"Hello, World!"
sandbox.fs.upload_file("/workspace/file.txt", content)

# Upload local file
with open("local_file.txt", "rb") as f:
    content = f.read()
sandbox.fs.upload_file("/workspace/data/file.txt", content)
```

### Download File

Download a file from the sandbox.

```python
content = sandbox.fs.download_file("/workspace/file.txt")
print(content.decode("utf-8"))
```

### List Files

List files in a directory.

```python
files = sandbox.fs.list_files("/workspace")
for file in files:
    print(f"{file.name}: {'directory' if file.is_dir else 'file'}, {file.size} bytes")
```

### Get File Info

Get metadata about a file.

```python
info = sandbox.fs.get_file_info("/workspace/file.txt")
print(f"Size: {info.size}, Modified: {info.mod_time}")
```

### Move Files

Move or rename files.

```python
sandbox.fs.move_files("/workspace/old.txt", "/workspace/new.txt")
```

### Delete File

Delete a file.

```python
sandbox.fs.delete_file("/workspace/file.txt")
```

### Find in Files

Search for content in files.

```python
matches = sandbox.fs.find_files("/workspace", "TODO:")
for match in matches:
    print(f"{match.file}:{match.line}: {match.content}")
```

### Search Files

Find files by name pattern.

```python
result = sandbox.fs.search_files("/workspace", "*.py")
for file in result.files:
    print(file)
```

### Replace in Files

Perform text replacements across files.

```python
results = sandbox.fs.replace_in_files(
    files=["/workspace/file1.txt", "/workspace/file2.txt"],
    pattern="old_text",
    new_value="new_text"
)
```

### Set File Permissions

Change file permissions and ownership.

```python
sandbox.fs.set_file_permissions(
    path="/workspace/script.sh",
    mode="755",  # Make executable
    owner="daytona"
)
```

## Git Operations

### Clone Repository

Clone a Git repository into the sandbox.

```python
sandbox.git.clone(
    url="https://github.com/user/repo.git",
    path="/workspace/repo"
)

# Clone with authentication
sandbox.git.clone(
    url="https://github.com/user/private-repo.git",
    path="/workspace/private-repo",
    username="user",
    password="token"
)
```

### Git Status

Check repository status.

```python
status = sandbox.git.status("/workspace/repo")
print(f"Branch: {status.current_branch}")
print(f"Modified files: {status.modified}")
```

### Git Add

Stage files for commit.

```python
sandbox.git.add("/workspace/repo", ["file.txt", "README.md"])
```

### Git Commit

Commit staged changes.

```python
sandbox.git.commit(
    path="/workspace/repo",
    message="Add new feature",
    author="John Doe",
    email="john@example.com"
)
```

### Git Push

Push changes to remote repository.

```python
sandbox.git.push(
    path="/workspace/repo",
    username="user",
    password="github_token"
)
```

### Git Pull

Pull changes from remote repository.

```python
sandbox.git.pull(
    path="/workspace/repo",
    username="user",
    password="github_token"
)
```

### List Branches

List branches in the repository.

```python
branches = sandbox.git.branches("/workspace/repo")
for branch in branches.branches:
    print(branch)
```

## Process Execution

### Execute Command

Run a shell command in the sandbox.

```python
response = sandbox.process.exec("ls -la /workspace")
print(f"Exit code: {response.exit_code}")
print(f"Output: {response.result}")
```

### Execute Code

Run code in the sandbox without creating a file.

```python
# Run Python code
response = sandbox.process.code_run("""
import os
print(f"Current directory: {os.getcwd()}")
print(f"Python version: {os.__version__}")
""")
print(response.result)
```

### Interactive Sessions

Create and manage long-running interactive sessions.

```python
# Create a session
session_id = "my-session"
sandbox.process.create_session(session_id)

# Execute commands in the session
from daytona_api_client import SessionExecuteRequest

# Change directory in the session
req = SessionExecuteRequest(command="cd /workspace", var_async=False)
sandbox.process.execute_session_command(session_id, req)

# Run a command in the new directory
req = SessionExecuteRequest(command="pwd", var_async=False)
response = sandbox.process.execute_session_command(session_id, req)
print(response.output)  # Should print "/workspace"

# Clean up
sandbox.process.delete_session(session_id)
```

### List Sessions

List all active sessions.

```python
sessions = sandbox.process.list_sessions()
for session in sessions:
    print(f"Session: {session.session_id}")
```

## LSP Server

### Create LSP Server

Create a Language Server Protocol server for code intelligence.

```python
from daytona_sdk import LspLanguageId

# Create LSP server for Python
lsp = sandbox.create_lsp_server(LspLanguageId.PYTHON, "/workspace/project")
```

### Start/Stop LSP Server

Manage LSP server lifecycle.

```python
# Start the server
lsp.start()

# Use LSP features...

# Stop the server when done
lsp.stop()
```

### Open/Close Files

Notify the LSP server about file operations.

```python
# Open a file
lsp.did_open("/workspace/project/main.py")

# Work with the file...

# Close the file when done
lsp.did_close("/workspace/project/main.py")
```

### Code Completion

Get code completion suggestions.

```python
from daytona_sdk.lsp_server import Position

# Get completions at a specific position
completions = lsp.completions("/workspace/project/main.py", Position(10, 15))
for item in completions.items:
    print(f"{item.label}: {item.detail}")
```

### Document Symbols

Get symbol information from a file.

```python
symbols = lsp.document_symbols("/workspace/project/main.py")
for symbol in symbols:
    print(f"{symbol.kind} {symbol.name}: {symbol.location}")
```

### Sandbox Symbols

Search for symbols across all files.

```python
# Find all symbols containing "User"
symbols = lsp.sandbox_symbols("User")
for symbol in symbols:
    print(f"{symbol.name} in {symbol.location}")
```

## Function Index

### Daytona
- `Daytona()` - Initialize a Daytona client
- `daytona.create()` - Create a new sandbox
- `daytona.remove()` - Remove a sandbox
- `daytona.list()` - List all sandboxes
- `daytona.get_current_sandbox()` - Get sandbox by ID
- `daytona.start()` - Start a sandbox
- `daytona.stop()` - Stop a sandbox

### Sandbox
- `sandbox.info()` - Get sandbox information
- `sandbox.start()` - Start the sandbox
- `sandbox.stop()` - Stop the sandbox
- `sandbox.get_user_root_dir()` - Get sandbox root directory
- `sandbox.create_lsp_server()` - Create LSP server
- `sandbox.set_labels()` - Set sandbox labels
- `sandbox.set_autostop_interval()` - Set auto-stop interval
- `sandbox.get_preview_link()` - Get preview URL for port
- `sandbox.archive()` - Archive the sandbox
- `sandbox.wait_for_sandbox_start()` - Wait for sandbox to start
- `sandbox.wait_for_sandbox_stop()` - Wait for sandbox to stop

### FileSystem
- `sandbox.fs.create_folder()` - Create a directory
- `sandbox.fs.delete_file()` - Delete a file
- `sandbox.fs.download_file()` - Download a file
- `sandbox.fs.find_files()` - Search file contents
- `sandbox.fs.get_file_info()` - Get file metadata
- `sandbox.fs.list_files()` - List directory contents
- `sandbox.fs.move_files()` - Move/rename files
- `sandbox.fs.replace_in_files()` - Replace text in files
- `sandbox.fs.search_files()` - Find files by pattern
- `sandbox.fs.set_file_permissions()` - Set file permissions
- `sandbox.fs.upload_file()` - Upload a file

### Git
- `sandbox.git.add()` - Stage files
- `sandbox.git.branches()` - List branches
- `sandbox.git.clone()` - Clone repository
- `sandbox.git.commit()` - Commit changes
- `sandbox.git.push()` - Push changes
- `sandbox.git.pull()` - Pull changes
- `sandbox.git.status()` - Get repository status

### Process
- `sandbox.process.exec()` - Execute shell command
- `sandbox.process.code_run()` - Run code
- `sandbox.process.create_session()` - Create interactive session
- `sandbox.process.delete_session()` - Delete session
- `sandbox.process.execute_session_command()` - Run command in session
- `sandbox.process.get_session()` - Get session information
- `sandbox.process.get_session_command()` - Get command information
- `sandbox.process.get_session_command_logs()` - Get command output
- `sandbox.process.list_sessions()` - List all sessions

### LSP Server
- `lsp.start()` - Start LSP server
- `lsp.stop()` - Stop LSP server
- `lsp.did_open()` - Open a file
- `lsp.did_close()` - Close a file
- `lsp.document_symbols()` - Get file symbols
- `lsp.sandbox_symbols()` - Search all symbols
- `lsp.completions()` - Get code completions